/// To clear the float elements.
///
/// @author liang@bonusway.com
///
///
/// @example scss - clear fix after `.foo` element.
///   .foo {
///     @include clearfix();
///   }
@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

/// To let the element locate at the center of its parent (horizontally and vertically).
///
/// @author liang@bonusway.com
///
///
/// @example scss - absolute center `.foo`.
///   .foo {
///     @include abs-center();
///   }
@mixin abs-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/// This mixin is used to set `.text--red` or `.bg--red`. Use this one globally
///
/// @author liang@bonusway.com
///
/// @param {class-name} $class-name - class name that want to attach color features
/// @param {property} $property - what css property that need to attach the colors
///
/// @example scss
///   @include color-activator();
///   @include color-activator('.bg', background-color);

@mixin color-activator($class-name: null, $property: 'color') {
    // default option is to activate `color` property
    @each $color-name, $color-value in $colors {
        // set the primary & secondary color
        @if $class-name != null {
            #{$class-name}--#{$color-name} {
                #{$property}: $color-value;
            }
        } @else  {
            .#{$color-name} {
                #{$property}: $color-value;
            }
        }


        // set the variation colors
        @each $variation-name, $variation-value in $color-variations {
            @if $class-name != null {
                #{$class-name}--#{$color-name}--#{$variation-name} {
                    #{$property}: color($color-name, $variation-name);
                }
            } @else {
                .#{$color-name}--#{$variation-name} {
                    #{$property}: color($color-name, $variation-name);
                }
            }
        }
    }
}

/// This mixin can be used to set the default font-size based on $font-sizes map
/// and attach the font-size specific modifiers to elements or classes based on $font-sizes-variations map.
///
/// @author liang@bonusway.com
///
/// @param {name} $name - the property name from `$font-sizes` map.
/// @example scss - set the default and modifiers to selector `.header`.
///   .header {
///     @include font-size-modifier(header);
///   }

@mixin font-size-modifier($name) {
    $base-size: map-get($font-sizes, $name);
    & {
        font-size: $base-size;
    }

    @each $variation-name, $variation-value in $font-sizes-variations {
        &.#{$variation-name} {
            $fn: get-function('font-size');
            font-size: font-size($name, $variation-name);
        }
    }
}