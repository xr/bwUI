/// This function can be used to get the color from the predefined color palette, to avoid color miss usage.
///
/// @author liang@bonusway.com
///
/// @param {property} $color - the main name from `$colors` map.
/// @param {property} $variation - the variation name from `$color-variations` map.
@function color($color, $variation: false) {

    @if map-has-key($colors, $color) {
      $color: map-get($colors, $color);
    } @else {
      @if type-of($color) != color {
        @error "Invalid color name: `#{$color}`.";
      }
    }
  
    @if $variation {
      @if not map-has-key($color-variations, $variation) {
        @error "Invalid $variation: `#{$variation}`.";
      } @else {
        $this-variation: map-get($color-variations, $variation);
        $args: join(map-get($this-variation, function), $color);
        @if map-get($this-variation, parameters) {
          $args: join($args, map-get($this-variation, parameters));
        }
        @return call($args...);
      }
    }
    @return $color;
}

/// This mixin is used to set `.text--red` or `.bg--red`. Use this one globally
///
/// @author liang@bonusway.com
///
/// @param {class-name} $class-name - class name that want to attach color features
/// @param {property} $property - what css property that need to attach the colors
/// @param {state} $state - if the color activator is stateful or not, e.g. hover or actived 
///
/// @example scss
///   @include color-activator();
///   @include color-activator('.bg', background-color);

@mixin color-activator($class-name: null, $property: 'color', $state: null) {
    // default option is to activate `color` property
    @each $color-name, $color-value in $colors {
        // set the primary & secondary color
        @if $class-name != null {

            @if $state != null {
                &.#{$class-name}--#{$color-name} {
                    #{$property}: $color-value;
                }
            } @else {
                .#{$class-name}--#{$color-name} {
                    #{$property}: $color-value;
                }
            }

        } @else  {
            @if $state != null {
                &.#{$color-name} {
                    #{$property}: $color-value;
                }
            } @else {
                .#{$color-name} {
                    #{$property}: $color-value;
                }
            }
        }


        // set the variation colors
        @each $variation-name, $variation-value in $color-variations {
            @if $class-name != null {
                @if $state != null {
                    &.#{$class-name}--#{$color-name}--#{$variation-name} {
                        #{$property}: color($color-name, $variation-name);
                    }
                } @else {
                    .#{$class-name}--#{$color-name}--#{$variation-name} {
                        #{$property}: color($color-name, $variation-name);
                    }
                }
            } @else {
                @if $state != null {
                    &.#{$color-name}--#{$variation-name} {
                        #{$property}: color($color-name, $variation-name);
                    }
                } @else {
                    .#{$color-name}--#{$variation-name} {
                        #{$property}: color($color-name, $variation-name);
                    }
                }
            }
        }
    }
}


/// This mixin can be used to darken with specific prefix
/// this can be useful when we want to modify the state of with the same class name. change state but keep the same class name.
///
/// @author liang@bonusway.com
///
/// @param {prefix} $prefix - in case we want to modify background, we have to specify prefix
/// @param {property} $property - the css property we want to change
/// @example scss - set the default and modifiers to selector `.header`.
///   .button {
///     &:hover {
///         @include class-darken();
///     }
///   }
@mixin class-darken($prefix: 'bg', $property: 'background-color') {
    @each $color-name, $color-value in $colors {
        // set the primary & secondary color
        @if $prefix != null {
            &.#{$prefix}--#{$color-name} {
                #{$property}: color($color-name, dark);
            }
        } @else {
            &.#{$color-name} {
                #{$property}: color($color-name, dark);
            }
        }
    }
}